
<h1>broker.cpp</h1>
<div class="highlight"><pre><span></span><span class="cp">#include</span> <span class="cpf">&quot;options.hpp&quot;</span><span class="cp"></span>
<span class="cp">#include</span> <span class="cpf">&quot;broker.hpp&quot;</span><span class="cp"></span>

<span class="cp">#include</span> <span class="cpf">&quot;proton/acceptor.hpp&quot;</span><span class="cp"></span>
<span class="cp">#include</span> <span class="cpf">&quot;proton/container.hpp&quot;</span><span class="cp"></span>
<span class="cp">#include</span> <span class="cpf">&quot;proton/value.hpp&quot;</span><span class="cp"></span>

<span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp"></span>
<span class="cp">#include</span> <span class="cpf">&lt;deque&gt;</span><span class="cp"></span>
<span class="cp">#include</span> <span class="cpf">&lt;map&gt;</span><span class="cp"></span>
<span class="cp">#include</span> <span class="cpf">&lt;list&gt;</span><span class="cp"></span>
<span class="cp">#include</span> <span class="cpf">&lt;string&gt;</span><span class="cp"></span>

<span class="cp">#include</span> <span class="cpf">&quot;fake_cpp11.hpp&quot;</span><span class="cp"></span>

<span class="k">class</span> <span class="nc">broker</span> <span class="p">{</span>
  <span class="k">public</span><span class="o">:</span>
    <span class="n">broker</span><span class="p">(</span><span class="k">const</span> <span class="n">proton</span><span class="o">::</span><span class="n">url</span><span class="o">&amp;</span> <span class="n">url</span><span class="p">)</span> <span class="o">:</span> <span class="n">handler_</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">queues_</span><span class="p">)</span> <span class="p">{}</span>

    <span class="n">proton</span><span class="o">::</span><span class="n">handler</span><span class="o">&amp;</span> <span class="n">handler</span><span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="n">handler_</span><span class="p">;</span> <span class="p">}</span>

  <span class="k">private</span><span class="o">:</span>
    <span class="k">class</span> <span class="nc">my_handler</span> <span class="o">:</span> <span class="k">public</span> <span class="n">broker_handler</span> <span class="p">{</span>
      <span class="k">public</span><span class="o">:</span>
        <span class="n">my_handler</span><span class="p">(</span><span class="k">const</span> <span class="n">proton</span><span class="o">::</span><span class="n">url</span><span class="o">&amp;</span> <span class="n">u</span><span class="p">,</span> <span class="n">queues</span><span class="o">&amp;</span> <span class="n">qs</span><span class="p">)</span> <span class="o">:</span> <span class="n">broker_handler</span><span class="p">(</span><span class="n">qs</span><span class="p">),</span> <span class="n">url_</span><span class="p">(</span><span class="n">u</span><span class="p">)</span> <span class="p">{}</span>

        <span class="kt">void</span> <span class="n">on_container_start</span><span class="p">(</span><span class="n">proton</span><span class="o">::</span><span class="n">container</span> <span class="o">&amp;</span><span class="n">c</span><span class="p">)</span> <span class="k">override</span> <span class="p">{</span>
            <span class="n">c</span><span class="p">.</span><span class="n">listen</span><span class="p">(</span><span class="n">url_</span><span class="p">);</span>
            <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;broker listening on &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">url_</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
        <span class="p">}</span>

      <span class="k">private</span><span class="o">:</span>
        <span class="k">const</span> <span class="n">proton</span><span class="o">::</span><span class="n">url</span><span class="o">&amp;</span> <span class="n">url_</span><span class="p">;</span>
    <span class="p">};</span>

  <span class="k">private</span><span class="o">:</span>
    <span class="n">queues</span> <span class="n">queues_</span><span class="p">;</span>
    <span class="n">my_handler</span> <span class="n">handler_</span><span class="p">;</span>
<span class="p">};</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span><span class="n">argv</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">proton</span><span class="o">::</span><span class="n">url</span> <span class="n">url</span><span class="p">(</span><span class="s">&quot;0.0.0.0&quot;</span><span class="p">);</span>
    <span class="n">options</span> <span class="n">opts</span><span class="p">(</span><span class="n">argc</span><span class="p">,</span> <span class="n">argv</span><span class="p">);</span>

    <span class="n">opts</span><span class="p">.</span><span class="n">add_value</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="sc">&#39;a&#39;</span><span class="p">,</span> <span class="s">&quot;address&quot;</span><span class="p">,</span> <span class="s">&quot;listen on URL&quot;</span><span class="p">,</span> <span class="s">&quot;URL&quot;</span><span class="p">);</span>

    <span class="k">try</span> <span class="p">{</span>
        <span class="n">opts</span><span class="p">.</span><span class="n">parse</span><span class="p">();</span>

        <span class="n">broker</span> <span class="n">b</span><span class="p">(</span><span class="n">url</span><span class="p">);</span>
        <span class="n">proton</span><span class="o">::</span><span class="n">container</span><span class="p">(</span><span class="n">b</span><span class="p">.</span><span class="n">handler</span><span class="p">()).</span><span class="n">run</span><span class="p">();</span>

        <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
    <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="k">const</span> <span class="n">bad_option</span><span class="o">&amp;</span> <span class="n">e</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">opts</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span> <span class="o">&lt;&lt;</span> <span class="n">e</span><span class="p">.</span><span class="n">what</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
    <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">exception</span><span class="o">&amp;</span> <span class="n">e</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">std</span><span class="o">::</span><span class="n">cerr</span> <span class="o">&lt;&lt;</span> <span class="n">e</span><span class="p">.</span><span class="n">what</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>

<p><a href="broker.cpp">Download this file</a></p>
