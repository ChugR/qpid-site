
<h1>send-async.c</h1>
<div class="highlight"><pre><span class="c1">// This is a re-implementation of send.c using non-blocking/asynchronous calls.</span>

<span class="cp">#include &quot;proton/message.h&quot;</span>
<span class="cp">#include &quot;proton/messenger.h&quot;</span>

<span class="cp">#include &quot;pncompat/misc_funcs.inc&quot;</span>
<span class="cp">#include &lt;stdio.h&gt;</span>
<span class="cp">#include &lt;stdlib.h&gt;</span>
<span class="cp">#include &lt;string.h&gt;</span>
<span class="cp">#include &lt;ctype.h&gt;</span>

<span class="cp">#if EMSCRIPTEN</span>
<span class="cp">#include &lt;emscripten.h&gt;</span>
<span class="cp">#endif</span>

<span class="kt">pn_message_t</span> <span class="o">*</span> <span class="n">message</span><span class="p">;</span>
<span class="kt">pn_messenger_t</span> <span class="o">*</span> <span class="n">messenger</span><span class="p">;</span>
<span class="kt">pn_tracker_t</span> <span class="n">tracker</span><span class="p">;</span>
<span class="kt">int</span> <span class="n">running</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>

<span class="cp">#define check(messenger)                                                     \</span>
<span class="cp">  {                                                                          \</span>
<span class="cp">    if(pn_messenger_errno(messenger))                                        \</span>
<span class="cp">    {                                                                        \</span>
<span class="cp">      die(__FILE__, __LINE__, pn_error_text(pn_messenger_error(messenger))); \</span>
<span class="cp">    }                                                                        \</span>
<span class="cp">  }                                                                          \</span>

<span class="kt">void</span> <span class="nf">die</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">file</span><span class="p">,</span> <span class="kt">int</span> <span class="n">line</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">message</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">fprintf</span><span class="p">(</span><span class="n">stderr</span><span class="p">,</span> <span class="s">&quot;%s:%i: %s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">file</span><span class="p">,</span> <span class="n">line</span><span class="p">,</span> <span class="n">message</span><span class="p">);</span>
    <span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">usage</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Usage: send [-a addr] [message]</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;-a     </span><span class="se">\t</span><span class="s">The target address [amqp[s]://domain[/name]]</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;message</span><span class="se">\t</span><span class="s">A text string to send.</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
    <span class="n">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">process</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{</span>
    <span class="kt">pn_status_t</span> <span class="n">status</span> <span class="o">=</span> <span class="n">pn_messenger_status</span><span class="p">(</span><span class="n">messenger</span><span class="p">,</span> <span class="n">tracker</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">status</span> <span class="o">!=</span> <span class="n">PN_STATUS_PENDING</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">running</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">pn_messenger_stop</span><span class="p">(</span><span class="n">messenger</span><span class="p">);</span>
            <span class="n">running</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="p">}</span> 
    <span class="p">}</span>

    <span class="k">if</span> <span class="p">(</span><span class="n">pn_messenger_stopped</span><span class="p">(</span><span class="n">messenger</span><span class="p">))</span> <span class="p">{</span>
        <span class="n">pn_message_free</span><span class="p">(</span><span class="n">message</span><span class="p">);</span>
        <span class="n">pn_messenger_free</span><span class="p">(</span><span class="n">messenger</span><span class="p">);</span>
        <span class="n">message</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
        <span class="n">messenger</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="cp">#if EMSCRIPTEN </span><span class="c1">// For emscripten C/C++ to JavaScript compiler.</span>
<span class="kt">void</span> <span class="nf">pump</span><span class="p">(</span><span class="kt">int</span> <span class="n">fd</span><span class="p">,</span> <span class="kt">void</span><span class="o">*</span> <span class="n">userData</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">while</span> <span class="p">(</span><span class="n">pn_messenger_work</span><span class="p">(</span><span class="n">messenger</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">process</span><span class="p">();</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">onclose</span><span class="p">(</span><span class="kt">int</span> <span class="n">fd</span><span class="p">,</span> <span class="kt">void</span><span class="o">*</span> <span class="n">userData</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">process</span><span class="p">();</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">onerror</span><span class="p">(</span><span class="kt">int</span> <span class="n">fd</span><span class="p">,</span> <span class="kt">int</span> <span class="n">errno</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="n">msg</span><span class="p">,</span> <span class="kt">void</span><span class="o">*</span> <span class="n">userData</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;error callback fd = %d, errno = %d, msg = %s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">fd</span><span class="p">,</span> <span class="n">errno</span><span class="p">,</span> <span class="n">msg</span><span class="p">);</span>
<span class="p">}</span>
<span class="cp">#endif</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span><span class="o">**</span> <span class="n">argv</span><span class="p">)</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">c</span><span class="p">;</span>
    <span class="kt">char</span> <span class="o">*</span> <span class="n">address</span> <span class="o">=</span> <span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="p">)</span> <span class="s">&quot;amqp://0.0.0.0&quot;</span><span class="p">;</span>
    <span class="kt">char</span> <span class="o">*</span> <span class="n">msgtext</span> <span class="o">=</span> <span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="p">)</span> <span class="s">&quot;Hello World!&quot;</span><span class="p">;</span>
    <span class="kt">pn_data_t</span><span class="o">*</span> <span class="n">body</span><span class="p">;</span>

    <span class="n">opterr</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

    <span class="k">while</span><span class="p">((</span><span class="n">c</span> <span class="o">=</span> <span class="n">getopt</span><span class="p">(</span><span class="n">argc</span><span class="p">,</span> <span class="n">argv</span><span class="p">,</span> <span class="s">&quot;ha:b:c:&quot;</span><span class="p">))</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">switch</span><span class="p">(</span><span class="n">c</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">case</span> <span class="sc">&#39;a&#39;</span>: <span class="n">address</span> <span class="o">=</span> <span class="n">optarg</span><span class="p">;</span> <span class="k">break</span><span class="p">;</span>
            <span class="k">case</span> <span class="sc">&#39;h&#39;</span>: <span class="n">usage</span><span class="p">();</span> <span class="k">break</span><span class="p">;</span>

            <span class="k">case</span> <span class="sc">&#39;?&#39;</span>:
                <span class="k">if</span><span class="p">(</span><span class="n">optopt</span> <span class="o">==</span> <span class="sc">&#39;a&#39;</span><span class="p">)</span>
                <span class="p">{</span>
                    <span class="n">fprintf</span><span class="p">(</span><span class="n">stderr</span><span class="p">,</span> <span class="s">&quot;Option -%c requires an argument.</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">optopt</span><span class="p">);</span>
                <span class="p">}</span>
                <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">isprint</span><span class="p">(</span><span class="n">optopt</span><span class="p">))</span>
                <span class="p">{</span>
                    <span class="n">fprintf</span><span class="p">(</span><span class="n">stderr</span><span class="p">,</span> <span class="s">&quot;Unknown option `-%c&#39;.</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">optopt</span><span class="p">);</span>
                <span class="p">}</span>
                <span class="k">else</span>
                <span class="p">{</span>
                    <span class="n">fprintf</span><span class="p">(</span><span class="n">stderr</span><span class="p">,</span> <span class="s">&quot;Unknown option character `</span><span class="se">\\</span><span class="s">x%x&#39;.</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">optopt</span><span class="p">);</span>
                <span class="p">}</span>
                <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
            <span class="nl">default:</span>
                <span class="n">abort</span><span class="p">();</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">if</span> <span class="p">(</span><span class="n">optind</span> <span class="o">&lt;</span> <span class="n">argc</span><span class="p">)</span> <span class="n">msgtext</span> <span class="o">=</span> <span class="n">argv</span><span class="p">[</span><span class="n">optind</span><span class="p">];</span>

    <span class="n">message</span> <span class="o">=</span> <span class="n">pn_message</span><span class="p">();</span>
    <span class="n">messenger</span> <span class="o">=</span> <span class="n">pn_messenger</span><span class="p">(</span><span class="nb">NULL</span><span class="p">);</span>
    <span class="n">pn_messenger_set_blocking</span><span class="p">(</span><span class="n">messenger</span><span class="p">,</span> <span class="nb">false</span><span class="p">);</span> <span class="c1">// Needs to be set non-blocking to behave asynchronously.</span>
    <span class="n">pn_messenger_set_outgoing_window</span><span class="p">(</span><span class="n">messenger</span><span class="p">,</span> <span class="mi">1024</span><span class="p">);</span> 

    <span class="n">pn_messenger_start</span><span class="p">(</span><span class="n">messenger</span><span class="p">);</span>

    <span class="n">pn_message_set_address</span><span class="p">(</span><span class="n">message</span><span class="p">,</span> <span class="n">address</span><span class="p">);</span>
    <span class="n">body</span> <span class="o">=</span> <span class="n">pn_message_body</span><span class="p">(</span><span class="n">message</span><span class="p">);</span>
    <span class="n">pn_data_put_string</span><span class="p">(</span><span class="n">body</span><span class="p">,</span> <span class="n">pn_bytes</span><span class="p">(</span><span class="n">strlen</span><span class="p">(</span><span class="n">msgtext</span><span class="p">),</span> <span class="n">msgtext</span><span class="p">));</span>

    <span class="n">pn_messenger_put</span><span class="p">(</span><span class="n">messenger</span><span class="p">,</span> <span class="n">message</span><span class="p">);</span>
    <span class="n">check</span><span class="p">(</span><span class="n">messenger</span><span class="p">);</span>

    <span class="n">tracker</span> <span class="o">=</span> <span class="n">pn_messenger_outgoing_tracker</span><span class="p">(</span><span class="n">messenger</span><span class="p">);</span>

<span class="cp">#if EMSCRIPTEN </span><span class="c1">// For emscripten C/C++ to JavaScript compiler.</span>
    <span class="n">emscripten_set_socket_error_callback</span><span class="p">(</span><span class="nb">NULL</span><span class="p">,</span> <span class="n">onerror</span><span class="p">);</span>

    <span class="n">emscripten_set_socket_open_callback</span><span class="p">(</span><span class="nb">NULL</span><span class="p">,</span> <span class="n">pump</span><span class="p">);</span>
    <span class="n">emscripten_set_socket_connection_callback</span><span class="p">(</span><span class="nb">NULL</span><span class="p">,</span> <span class="n">pump</span><span class="p">);</span>
    <span class="n">emscripten_set_socket_message_callback</span><span class="p">(</span><span class="nb">NULL</span><span class="p">,</span> <span class="n">pump</span><span class="p">);</span>
    <span class="n">emscripten_set_socket_close_callback</span><span class="p">(</span><span class="nb">NULL</span><span class="p">,</span> <span class="n">onclose</span><span class="p">);</span>
<span class="cp">#else </span><span class="c1">// For native compiler.</span>
    <span class="k">while</span> <span class="p">(</span><span class="n">running</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">pn_messenger_work</span><span class="p">(</span><span class="n">messenger</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">);</span> <span class="c1">// Block indefinitely until there has been socket activity.</span>
        <span class="n">process</span><span class="p">();</span>
    <span class="p">}</span>

    <span class="k">while</span> <span class="p">(</span><span class="n">messenger</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">pn_messenger_stopped</span><span class="p">(</span><span class="n">messenger</span><span class="p">))</span> <span class="p">{</span>
        <span class="n">pn_messenger_work</span><span class="p">(</span><span class="n">messenger</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
        <span class="n">process</span><span class="p">();</span>
    <span class="p">}</span>
<span class="cp">#endif</span>

    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>

<p><a href="send-async.c">Download this file</a></p>
