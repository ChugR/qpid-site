
<h1>recurring_timer.cpp</h1>
<div class="highlight"><pre><span></span><span class="cp">#include</span> <span class="cpf">&quot;options.hpp&quot;</span><span class="cp"></span>

<span class="cp">#include</span> <span class="cpf">&quot;proton/container.hpp&quot;</span><span class="cp"></span>
<span class="cp">#include</span> <span class="cpf">&quot;proton/event.hpp&quot;</span><span class="cp"></span>
<span class="cp">#include</span> <span class="cpf">&quot;proton/handler.hpp&quot;</span><span class="cp"></span>
<span class="cp">#include</span> <span class="cpf">&quot;proton/task.hpp&quot;</span><span class="cp"></span>

<span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp"></span>
<span class="cp">#include</span> <span class="cpf">&lt;map&gt;</span><span class="cp"></span>

<span class="k">class</span> <span class="nc">ticker</span> <span class="o">:</span> <span class="k">public</span> <span class="n">proton</span><span class="o">::</span><span class="n">handler</span> <span class="p">{</span>
    <span class="kt">void</span> <span class="n">on_timer</span><span class="p">(</span><span class="n">proton</span><span class="o">::</span><span class="n">event</span> <span class="o">&amp;</span><span class="n">e</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Tick...&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">};</span>

<span class="k">class</span> <span class="nc">tocker</span> <span class="o">:</span> <span class="k">public</span> <span class="n">proton</span><span class="o">::</span><span class="n">handler</span> <span class="p">{</span>
    <span class="kt">void</span> <span class="n">on_timer</span><span class="p">(</span><span class="n">proton</span><span class="o">::</span><span class="n">event</span> <span class="o">&amp;</span><span class="n">e</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Tock...&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">};</span>


<span class="k">class</span> <span class="nc">recurring</span> <span class="o">:</span> <span class="k">public</span> <span class="n">proton</span><span class="o">::</span><span class="n">handler</span> <span class="p">{</span>
  <span class="k">private</span><span class="o">:</span>
    <span class="kt">int</span> <span class="n">remaining_msecs</span><span class="p">,</span> <span class="n">tick_ms</span><span class="p">;</span>
    <span class="n">ticker</span> <span class="n">tick_handler</span><span class="p">;</span>
    <span class="n">tocker</span> <span class="n">tock_handler</span><span class="p">;</span>
    <span class="n">proton</span><span class="o">::</span><span class="n">task</span> <span class="n">cancel_task</span><span class="p">;</span>
  <span class="k">public</span><span class="o">:</span>

    <span class="n">recurring</span><span class="p">(</span><span class="kt">int</span> <span class="n">msecs</span><span class="p">,</span> <span class="kt">int</span> <span class="n">tickms</span><span class="p">)</span> <span class="o">:</span> <span class="n">remaining_msecs</span><span class="p">(</span><span class="n">msecs</span><span class="p">),</span> <span class="n">tick_ms</span><span class="p">(</span><span class="n">tickms</span><span class="p">),</span> <span class="n">cancel_task</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="p">{}</span>

    <span class="n">proton</span><span class="o">::</span><span class="n">task</span> <span class="n">ticktock</span><span class="p">(</span><span class="n">proton</span><span class="o">::</span><span class="n">event</span> <span class="o">&amp;</span><span class="n">e</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// Show timer events in separate handlers.</span>
        <span class="n">e</span><span class="p">.</span><span class="n">container</span><span class="p">().</span><span class="n">schedule</span><span class="p">(</span><span class="n">tick_ms</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">tick_handler</span><span class="p">);</span>
        <span class="k">return</span> <span class="n">e</span><span class="p">.</span><span class="n">container</span><span class="p">().</span><span class="n">schedule</span><span class="p">(</span><span class="n">tick_ms</span> <span class="o">*</span> <span class="mi">3</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">tock_handler</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="kt">void</span> <span class="n">on_start</span><span class="p">(</span><span class="n">proton</span><span class="o">::</span><span class="n">event</span> <span class="o">&amp;</span><span class="n">e</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// Demonstrate cancel(), we will cancel the first tock on the first recurring::on_timer_task</span>
        <span class="n">cancel_task</span> <span class="o">=</span> <span class="n">ticktock</span><span class="p">(</span><span class="n">e</span><span class="p">);</span>
        <span class="n">e</span><span class="p">.</span><span class="n">container</span><span class="p">().</span><span class="n">schedule</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="kt">void</span> <span class="n">on_timer</span><span class="p">(</span><span class="n">proton</span><span class="o">::</span><span class="n">event</span> <span class="o">&amp;</span><span class="n">e</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="o">!!</span><span class="n">cancel_task</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">cancel_task</span><span class="p">.</span><span class="n">cancel</span><span class="p">();</span>
            <span class="n">cancel_task</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
            <span class="n">e</span><span class="p">.</span><span class="n">container</span><span class="p">().</span><span class="n">schedule</span><span class="p">(</span><span class="n">tick_ms</span> <span class="o">*</span> <span class="mi">4</span><span class="p">);</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="n">remaining_msecs</span> <span class="o">-=</span> <span class="n">tick_ms</span> <span class="o">*</span> <span class="mi">4</span><span class="p">;</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">remaining_msecs</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
                <span class="n">ticktock</span><span class="p">(</span><span class="n">e</span><span class="p">);</span>
                <span class="n">e</span><span class="p">.</span><span class="n">container</span><span class="p">().</span><span class="n">schedule</span><span class="p">(</span><span class="n">tick_ms</span> <span class="o">*</span> <span class="mi">4</span><span class="p">);</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">};</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span><span class="n">argv</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// Command line options</span>
    <span class="kt">double</span> <span class="n">running_time</span> <span class="o">=</span> <span class="mi">5</span><span class="p">;</span>
    <span class="kt">double</span> <span class="n">tick</span> <span class="o">=</span> <span class="mf">0.25</span><span class="p">;</span>
    <span class="n">options</span> <span class="n">opts</span><span class="p">(</span><span class="n">argc</span><span class="p">,</span> <span class="n">argv</span><span class="p">);</span>
    <span class="n">opts</span><span class="p">.</span><span class="n">add_value</span><span class="p">(</span><span class="n">running_time</span><span class="p">,</span> <span class="sc">&#39;t&#39;</span><span class="p">,</span> <span class="s">&quot;running time&quot;</span><span class="p">,</span> <span class="s">&quot;running time in seconds&quot;</span><span class="p">,</span> <span class="s">&quot;RUNTIME&quot;</span><span class="p">);</span>
    <span class="n">opts</span><span class="p">.</span><span class="n">add_value</span><span class="p">(</span><span class="n">tick</span><span class="p">,</span> <span class="sc">&#39;k&#39;</span><span class="p">,</span> <span class="s">&quot;tick time&quot;</span><span class="p">,</span> <span class="s">&quot;tick time as fraction of second&quot;</span><span class="p">,</span> <span class="s">&quot;TICK&quot;</span><span class="p">);</span>
    <span class="k">try</span> <span class="p">{</span>
        <span class="n">opts</span><span class="p">.</span><span class="n">parse</span><span class="p">();</span>
        <span class="n">recurring</span> <span class="n">recurring_handler</span><span class="p">(</span><span class="kt">int</span><span class="p">(</span><span class="n">running_time</span> <span class="o">*</span> <span class="mi">1000</span><span class="p">),</span> <span class="kt">int</span><span class="p">(</span><span class="n">tick</span> <span class="o">*</span> <span class="mi">1000</span><span class="p">));</span>
        <span class="n">proton</span><span class="o">::</span><span class="n">container</span><span class="p">(</span><span class="n">recurring_handler</span><span class="p">).</span><span class="n">run</span><span class="p">();</span>
        <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
    <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="k">const</span> <span class="n">bad_option</span><span class="o">&amp;</span> <span class="n">e</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">opts</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span> <span class="o">&lt;&lt;</span> <span class="n">e</span><span class="p">.</span><span class="n">what</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
    <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">exception</span><span class="o">&amp;</span> <span class="n">e</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">std</span><span class="o">::</span><span class="n">cerr</span> <span class="o">&lt;&lt;</span> <span class="n">e</span><span class="p">.</span><span class="n">what</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>

<p><a href="recurring_timer.cpp">Download this file</a></p>
