
<h1>broker.cpp</h1>
<div class="highlight"><pre><span></span><span class="cp">#include</span> <span class="cpf">&quot;options.hpp&quot;</span><span class="cp"></span>

<span class="cp">#include</span> <span class="cpf">&lt;proton/connection.hpp&gt;</span><span class="cp"></span>
<span class="cp">#include</span> <span class="cpf">&lt;proton/default_container.hpp&gt;</span><span class="cp"></span>
<span class="cp">#include</span> <span class="cpf">&lt;proton/delivery.hpp&gt;</span><span class="cp"></span>
<span class="cp">#include</span> <span class="cpf">&lt;proton/messaging_handler.hpp&gt;</span><span class="cp"></span>
<span class="cp">#include</span> <span class="cpf">&lt;proton/message.hpp&gt;</span><span class="cp"></span>
<span class="cp">#include</span> <span class="cpf">&lt;proton/receiver_options.hpp&gt;</span><span class="cp"></span>
<span class="cp">#include</span> <span class="cpf">&lt;proton/sender.hpp&gt;</span><span class="cp"></span>
<span class="cp">#include</span> <span class="cpf">&lt;proton/sender_options.hpp&gt;</span><span class="cp"></span>
<span class="cp">#include</span> <span class="cpf">&lt;proton/source_options.hpp&gt;</span><span class="cp"></span>
<span class="cp">#include</span> <span class="cpf">&lt;proton/target_options.hpp&gt;</span><span class="cp"></span>
<span class="cp">#include</span> <span class="cpf">&lt;proton/transport.hpp&gt;</span><span class="cp"></span>
<span class="cp">#include</span> <span class="cpf">&lt;proton/url.hpp&gt;</span><span class="cp"></span>

<span class="cp">#include</span> <span class="cpf">&lt;deque&gt;</span><span class="cp"></span>
<span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp"></span>
<span class="cp">#include</span> <span class="cpf">&lt;list&gt;</span><span class="cp"></span>
<span class="cp">#include</span> <span class="cpf">&lt;map&gt;</span><span class="cp"></span>
<span class="cp">#include</span> <span class="cpf">&lt;string&gt;</span><span class="cp"></span>

<span class="cp">#include</span> <span class="cpf">&quot;fake_cpp11.hpp&quot;</span><span class="cp"></span>

<span class="c1">/// A simple implementation of a queue.</span>
<span class="k">class</span> <span class="nc">queue</span> <span class="p">{</span>
  <span class="k">public</span><span class="o">:</span>
    <span class="n">queue</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="o">&amp;</span><span class="n">name</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">dynamic</span> <span class="o">=</span> <span class="nb">false</span><span class="p">)</span> <span class="o">:</span> <span class="n">name_</span><span class="p">(</span><span class="n">name</span><span class="p">),</span> <span class="n">dynamic_</span><span class="p">(</span><span class="n">dynamic</span><span class="p">)</span> <span class="p">{}</span>

    <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">name</span><span class="p">()</span> <span class="k">const</span> <span class="p">{</span> <span class="k">return</span> <span class="n">name_</span><span class="p">;</span> <span class="p">}</span>

    <span class="kt">void</span> <span class="n">subscribe</span><span class="p">(</span><span class="n">proton</span><span class="o">::</span><span class="n">sender</span> <span class="n">s</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">consumers_</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">s</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="c1">// Return true if queue can be deleted.</span>
    <span class="kt">bool</span> <span class="n">unsubscribe</span><span class="p">(</span><span class="n">proton</span><span class="o">::</span><span class="n">sender</span> <span class="n">s</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">consumers_</span><span class="p">.</span><span class="n">remove</span><span class="p">(</span><span class="n">s</span><span class="p">);</span>
        <span class="k">return</span> <span class="p">(</span><span class="n">consumers_</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">dynamic_</span> <span class="o">||</span> <span class="n">messages_</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">==</span> <span class="mi">0</span><span class="p">));</span>
    <span class="p">}</span>

    <span class="kt">void</span> <span class="n">publish</span><span class="p">(</span><span class="k">const</span> <span class="n">proton</span><span class="o">::</span><span class="n">message</span> <span class="o">&amp;</span><span class="n">m</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">messages_</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">m</span><span class="p">);</span>
        <span class="n">dispatch</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="kt">void</span> <span class="n">dispatch</span><span class="p">(</span><span class="n">proton</span><span class="o">::</span><span class="n">sender</span> <span class="o">*</span><span class="n">s</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">while</span> <span class="p">(</span><span class="n">deliver_to</span><span class="p">(</span><span class="n">s</span><span class="p">))</span> <span class="p">{}</span>
    <span class="p">}</span>

    <span class="kt">bool</span> <span class="n">deliver_to</span><span class="p">(</span><span class="n">proton</span><span class="o">::</span><span class="n">sender</span> <span class="o">*</span><span class="n">s</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// Deliver to single sender if supplied, else all consumers</span>
        <span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="n">s</span> <span class="o">?</span> <span class="mi">1</span> <span class="o">:</span> <span class="n">consumers_</span><span class="p">.</span><span class="n">size</span><span class="p">();</span>

        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">count</span><span class="p">)</span> <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>

        <span class="kt">bool</span> <span class="n">result</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
        <span class="n">sender_list</span><span class="o">::</span><span class="n">iterator</span> <span class="n">it</span> <span class="o">=</span> <span class="n">consumers_</span><span class="p">.</span><span class="n">begin</span><span class="p">();</span>

        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">s</span> <span class="o">&amp;&amp;</span> <span class="n">count</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">s</span> <span class="o">=</span> <span class="o">&amp;*</span><span class="n">it</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">while</span> <span class="p">(</span><span class="n">messages_</span><span class="p">.</span><span class="n">size</span><span class="p">())</span> <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">s</span><span class="o">-&gt;</span><span class="n">credit</span><span class="p">())</span> <span class="p">{</span>
                <span class="k">const</span> <span class="n">proton</span><span class="o">::</span><span class="n">message</span><span class="o">&amp;</span> <span class="n">m</span> <span class="o">=</span> <span class="n">messages_</span><span class="p">.</span><span class="n">front</span><span class="p">();</span>

                <span class="n">s</span><span class="o">-&gt;</span><span class="n">send</span><span class="p">(</span><span class="n">m</span><span class="p">);</span>
                <span class="n">messages_</span><span class="p">.</span><span class="n">pop_front</span><span class="p">();</span>
                <span class="n">result</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
            <span class="p">}</span>

            <span class="k">if</span> <span class="p">(</span><span class="o">--</span><span class="n">count</span><span class="p">)</span> <span class="p">{</span>
                <span class="n">it</span><span class="o">++</span><span class="p">;</span>
            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
                <span class="k">return</span> <span class="n">result</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
    <span class="p">}</span>

  <span class="k">private</span><span class="o">:</span>
    <span class="k">typedef</span> <span class="n">std</span><span class="o">::</span><span class="n">deque</span><span class="o">&lt;</span><span class="n">proton</span><span class="o">::</span><span class="n">message</span><span class="o">&gt;</span> <span class="n">message_queue</span><span class="p">;</span>
    <span class="k">typedef</span> <span class="n">std</span><span class="o">::</span><span class="n">list</span><span class="o">&lt;</span><span class="n">proton</span><span class="o">::</span><span class="n">sender</span><span class="o">&gt;</span> <span class="n">sender_list</span><span class="p">;</span>

    <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">name_</span><span class="p">;</span>
    <span class="kt">bool</span> <span class="n">dynamic_</span><span class="p">;</span>
    <span class="n">message_queue</span> <span class="n">messages_</span><span class="p">;</span>
    <span class="n">sender_list</span> <span class="n">consumers_</span><span class="p">;</span>
<span class="p">};</span>

<span class="c1">/// A collection of queues and queue factory, used by a broker.</span>
<span class="k">class</span> <span class="nc">queues</span> <span class="p">{</span>
  <span class="k">public</span><span class="o">:</span>
    <span class="n">queues</span><span class="p">()</span> <span class="o">:</span> <span class="n">next_id_</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="p">{}</span>
    <span class="k">virtual</span> <span class="o">~</span><span class="n">queues</span><span class="p">()</span> <span class="p">{}</span>

    <span class="c1">// Get or create a queue.</span>
    <span class="k">virtual</span> <span class="n">queue</span> <span class="o">&amp;</span><span class="n">get</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="o">&amp;</span><span class="n">address</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">address</span><span class="p">.</span><span class="n">empty</span><span class="p">())</span> <span class="p">{</span>
            <span class="k">throw</span> <span class="n">std</span><span class="o">::</span><span class="n">runtime_error</span><span class="p">(</span><span class="s">&quot;empty queue name&quot;</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="n">queue</span><span class="o">*&amp;</span> <span class="n">q</span> <span class="o">=</span> <span class="n">queues_</span><span class="p">[</span><span class="n">address</span><span class="p">];</span>

        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">q</span><span class="p">)</span> <span class="n">q</span> <span class="o">=</span> <span class="k">new</span> <span class="n">queue</span><span class="p">(</span><span class="n">address</span><span class="p">);</span>

        <span class="k">return</span> <span class="o">*</span><span class="n">q</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="c1">// Create a dynamic queue with a unique name.</span>
    <span class="k">virtual</span> <span class="n">queue</span> <span class="o">&amp;</span><span class="n">dynamic</span><span class="p">()</span> <span class="p">{</span>
        <span class="n">std</span><span class="o">::</span><span class="n">ostringstream</span> <span class="n">os</span><span class="p">;</span>
        <span class="n">os</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;q&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">next_id_</span><span class="o">++</span><span class="p">;</span>
        <span class="n">queue</span> <span class="o">*</span><span class="n">q</span> <span class="o">=</span> <span class="n">queues_</span><span class="p">[</span><span class="n">os</span><span class="p">.</span><span class="n">str</span><span class="p">()]</span> <span class="o">=</span> <span class="k">new</span> <span class="n">queue</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">str</span><span class="p">(),</span> <span class="nb">true</span><span class="p">);</span>

        <span class="k">return</span> <span class="o">*</span><span class="n">q</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="c1">// Delete the named queue</span>
    <span class="k">virtual</span> <span class="kt">void</span> <span class="n">erase</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="o">&amp;</span><span class="n">name</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">delete</span> <span class="n">queues_</span><span class="p">[</span><span class="n">name</span><span class="p">];</span>
        <span class="n">queues_</span><span class="p">.</span><span class="n">erase</span><span class="p">(</span><span class="n">name</span><span class="p">);</span>
    <span class="p">}</span>

  <span class="k">protected</span><span class="o">:</span>
    <span class="k">typedef</span> <span class="n">std</span><span class="o">::</span><span class="n">map</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="p">,</span> <span class="n">queue</span> <span class="o">*&gt;</span> <span class="n">queue_map</span><span class="p">;</span>
    <span class="n">queue_map</span> <span class="n">queues_</span><span class="p">;</span>
    <span class="kt">uint64_t</span> <span class="n">next_id_</span><span class="p">;</span> <span class="c1">// Use to generate unique queue IDs.</span>
<span class="p">};</span>

<span class="c1">// A handler to implement broker logic</span>
<span class="k">class</span> <span class="nc">broker_handler</span> <span class="o">:</span> <span class="k">public</span> <span class="n">proton</span><span class="o">::</span><span class="n">messaging_handler</span> <span class="p">{</span>
  <span class="k">public</span><span class="o">:</span>
    <span class="n">broker_handler</span><span class="p">(</span><span class="n">queues</span><span class="o">&amp;</span> <span class="n">qs</span><span class="p">)</span> <span class="o">:</span> <span class="n">queues_</span><span class="p">(</span><span class="n">qs</span><span class="p">)</span> <span class="p">{}</span>

    <span class="kt">void</span> <span class="n">on_sender_open</span><span class="p">(</span><span class="n">proton</span><span class="o">::</span><span class="n">sender</span> <span class="o">&amp;</span><span class="n">sender</span><span class="p">)</span> <span class="n">OVERRIDE</span> <span class="p">{</span>
        <span class="n">proton</span><span class="o">::</span><span class="n">source</span> <span class="n">src</span><span class="p">(</span><span class="n">sender</span><span class="p">.</span><span class="n">source</span><span class="p">());</span>
        <span class="n">queue</span> <span class="o">*</span><span class="n">q</span><span class="p">;</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">src</span><span class="p">.</span><span class="n">dynamic</span><span class="p">())</span> <span class="p">{</span>
            <span class="n">q</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">queues_</span><span class="p">.</span><span class="n">dynamic</span><span class="p">();</span>
        <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">src</span><span class="p">.</span><span class="n">address</span><span class="p">().</span><span class="n">empty</span><span class="p">())</span> <span class="p">{</span>
            <span class="n">q</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">queues_</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="n">src</span><span class="p">.</span><span class="n">address</span><span class="p">());</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="n">sender</span><span class="p">.</span><span class="n">close</span><span class="p">(</span><span class="n">proton</span><span class="o">::</span><span class="n">error_condition</span><span class="p">(</span><span class="s">&quot;No queue address supplied&quot;</span><span class="p">));</span>
            <span class="k">return</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="n">sender</span><span class="p">.</span><span class="n">open</span><span class="p">(</span><span class="n">proton</span><span class="o">::</span><span class="n">sender_options</span><span class="p">().</span><span class="n">source</span><span class="p">(</span><span class="n">proton</span><span class="o">::</span><span class="n">source_options</span><span class="p">().</span><span class="n">address</span><span class="p">(</span><span class="n">q</span><span class="o">-&gt;</span><span class="n">name</span><span class="p">())));</span>
        <span class="n">q</span><span class="o">-&gt;</span><span class="n">subscribe</span><span class="p">(</span><span class="n">sender</span><span class="p">);</span>
        <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;broker outgoing link from &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">q</span><span class="o">-&gt;</span><span class="n">name</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="kt">void</span> <span class="n">on_receiver_open</span><span class="p">(</span><span class="n">proton</span><span class="o">::</span><span class="n">receiver</span> <span class="o">&amp;</span><span class="n">receiver</span><span class="p">)</span> <span class="n">OVERRIDE</span> <span class="p">{</span>
        <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">address</span> <span class="o">=</span> <span class="n">receiver</span><span class="p">.</span><span class="n">target</span><span class="p">().</span><span class="n">address</span><span class="p">();</span>
        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">address</span><span class="p">.</span><span class="n">empty</span><span class="p">())</span> <span class="p">{</span>
            <span class="n">receiver</span><span class="p">.</span><span class="n">open</span><span class="p">(</span><span class="n">proton</span><span class="o">::</span><span class="n">receiver_options</span><span class="p">().</span><span class="n">target</span><span class="p">(</span><span class="n">proton</span><span class="o">::</span><span class="n">target_options</span><span class="p">().</span><span class="n">address</span><span class="p">(</span><span class="n">address</span><span class="p">)));</span>
            <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;broker incoming link to &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">address</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="n">receiver</span><span class="p">.</span><span class="n">close</span><span class="p">(</span><span class="n">proton</span><span class="o">::</span><span class="n">error_condition</span><span class="p">(</span><span class="s">&quot;No queue address supplied&quot;</span><span class="p">));</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="kt">void</span> <span class="n">unsubscribe</span><span class="p">(</span><span class="n">proton</span><span class="o">::</span><span class="n">sender</span> <span class="n">lnk</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">address</span> <span class="o">=</span> <span class="n">lnk</span><span class="p">.</span><span class="n">source</span><span class="p">().</span><span class="n">address</span><span class="p">();</span>

        <span class="k">if</span> <span class="p">(</span><span class="n">queues_</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="n">address</span><span class="p">).</span><span class="n">unsubscribe</span><span class="p">(</span><span class="n">lnk</span><span class="p">))</span> <span class="p">{</span>
            <span class="n">queues_</span><span class="p">.</span><span class="n">erase</span><span class="p">(</span><span class="n">address</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="kt">void</span> <span class="n">on_sender_close</span><span class="p">(</span><span class="n">proton</span><span class="o">::</span><span class="n">sender</span> <span class="o">&amp;</span><span class="n">sender</span><span class="p">)</span> <span class="n">OVERRIDE</span> <span class="p">{</span>
        <span class="n">unsubscribe</span><span class="p">(</span><span class="n">sender</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="kt">void</span> <span class="n">on_connection_close</span><span class="p">(</span><span class="n">proton</span><span class="o">::</span><span class="n">connection</span> <span class="o">&amp;</span><span class="n">c</span><span class="p">)</span> <span class="n">OVERRIDE</span> <span class="p">{</span>
        <span class="n">remove_stale_consumers</span><span class="p">(</span><span class="n">c</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="kt">void</span> <span class="n">on_transport_close</span><span class="p">(</span><span class="n">proton</span><span class="o">::</span><span class="n">transport</span> <span class="o">&amp;</span><span class="n">t</span><span class="p">)</span> <span class="n">OVERRIDE</span> <span class="p">{</span>
        <span class="n">remove_stale_consumers</span><span class="p">(</span><span class="n">t</span><span class="p">.</span><span class="n">connection</span><span class="p">());</span>
    <span class="p">}</span>

    <span class="kt">void</span> <span class="n">on_transport_error</span><span class="p">(</span><span class="n">proton</span><span class="o">::</span><span class="n">transport</span> <span class="o">&amp;</span><span class="n">t</span><span class="p">)</span> <span class="n">OVERRIDE</span> <span class="p">{</span>
        <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;broker client disconnect: &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">t</span><span class="p">.</span><span class="n">error</span><span class="p">().</span><span class="n">what</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="kt">void</span> <span class="n">on_error</span><span class="p">(</span><span class="k">const</span> <span class="n">proton</span><span class="o">::</span><span class="n">error_condition</span> <span class="o">&amp;</span><span class="n">c</span><span class="p">)</span> <span class="n">OVERRIDE</span> <span class="p">{</span>
        <span class="n">std</span><span class="o">::</span><span class="n">cerr</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;broker error: &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">c</span><span class="p">.</span><span class="n">what</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="kt">void</span> <span class="n">remove_stale_consumers</span><span class="p">(</span><span class="n">proton</span><span class="o">::</span><span class="n">connection</span> <span class="n">connection</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">proton</span><span class="o">::</span><span class="n">sender_range</span> <span class="n">r</span> <span class="o">=</span> <span class="n">connection</span><span class="p">.</span><span class="n">senders</span><span class="p">();</span>
        <span class="k">for</span> <span class="p">(</span><span class="n">proton</span><span class="o">::</span><span class="n">sender_iterator</span> <span class="n">i</span> <span class="o">=</span> <span class="n">r</span><span class="p">.</span><span class="n">begin</span><span class="p">();</span> <span class="n">i</span> <span class="o">!=</span> <span class="n">r</span><span class="p">.</span><span class="n">end</span><span class="p">();</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">i</span><span class="o">-&gt;</span><span class="n">active</span><span class="p">())</span>
                <span class="n">unsubscribe</span><span class="p">(</span><span class="o">*</span><span class="n">i</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="kt">void</span> <span class="n">on_sendable</span><span class="p">(</span><span class="n">proton</span><span class="o">::</span><span class="n">sender</span> <span class="o">&amp;</span><span class="n">s</span><span class="p">)</span> <span class="n">OVERRIDE</span> <span class="p">{</span>
        <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">address</span> <span class="o">=</span> <span class="n">s</span><span class="p">.</span><span class="n">source</span><span class="p">().</span><span class="n">address</span><span class="p">();</span>

        <span class="n">queues_</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="n">address</span><span class="p">).</span><span class="n">dispatch</span><span class="p">(</span><span class="o">&amp;</span><span class="n">s</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="kt">void</span> <span class="n">on_message</span><span class="p">(</span><span class="n">proton</span><span class="o">::</span><span class="n">delivery</span> <span class="o">&amp;</span><span class="n">d</span><span class="p">,</span> <span class="n">proton</span><span class="o">::</span><span class="n">message</span> <span class="o">&amp;</span><span class="n">m</span><span class="p">)</span> <span class="n">OVERRIDE</span> <span class="p">{</span>
        <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">address</span> <span class="o">=</span> <span class="n">d</span><span class="p">.</span><span class="n">receiver</span><span class="p">().</span><span class="n">target</span><span class="p">().</span><span class="n">address</span><span class="p">();</span>
        <span class="n">queues_</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="n">address</span><span class="p">).</span><span class="n">publish</span><span class="p">(</span><span class="n">m</span><span class="p">);</span>
    <span class="p">}</span>

  <span class="k">protected</span><span class="o">:</span>
    <span class="n">queues</span><span class="o">&amp;</span> <span class="n">queues_</span><span class="p">;</span>
<span class="p">};</span>


<span class="c1">// The broker</span>
<span class="k">class</span> <span class="nc">broker</span> <span class="p">{</span>
  <span class="k">public</span><span class="o">:</span>
    <span class="n">broker</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&amp;</span> <span class="n">url</span><span class="p">)</span> <span class="o">:</span> <span class="n">handler_</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">queues_</span><span class="p">)</span> <span class="p">{}</span>

    <span class="n">proton</span><span class="o">::</span><span class="n">messaging_handler</span><span class="o">&amp;</span> <span class="n">handler</span><span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="n">handler_</span><span class="p">;</span> <span class="p">}</span>

  <span class="k">private</span><span class="o">:</span>
    <span class="k">class</span> <span class="nc">my_handler</span> <span class="o">:</span> <span class="k">public</span> <span class="n">broker_handler</span> <span class="p">{</span>
      <span class="k">public</span><span class="o">:</span>
        <span class="n">my_handler</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&amp;</span> <span class="n">u</span><span class="p">,</span> <span class="n">queues</span><span class="o">&amp;</span> <span class="n">qs</span><span class="p">)</span> <span class="o">:</span> <span class="n">broker_handler</span><span class="p">(</span><span class="n">qs</span><span class="p">),</span> <span class="n">url_</span><span class="p">(</span><span class="n">u</span><span class="p">)</span> <span class="p">{}</span>

        <span class="kt">void</span> <span class="n">on_container_start</span><span class="p">(</span><span class="n">proton</span><span class="o">::</span><span class="n">container</span> <span class="o">&amp;</span><span class="n">c</span><span class="p">)</span> <span class="n">OVERRIDE</span> <span class="p">{</span>
            <span class="n">c</span><span class="p">.</span><span class="n">listen</span><span class="p">(</span><span class="n">url_</span><span class="p">);</span>
            <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;broker listening on &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">url_</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
        <span class="p">}</span>

      <span class="k">private</span><span class="o">:</span>
        <span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&amp;</span> <span class="n">url_</span><span class="p">;</span>
    <span class="p">};</span>

  <span class="k">private</span><span class="o">:</span>
    <span class="n">queues</span> <span class="n">queues_</span><span class="p">;</span>
    <span class="n">my_handler</span> <span class="n">handler_</span><span class="p">;</span>
<span class="p">};</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span><span class="n">argv</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">url</span><span class="p">(</span><span class="s">&quot;0.0.0.0&quot;</span><span class="p">);</span>
    <span class="n">example</span><span class="o">::</span><span class="n">options</span> <span class="n">opts</span><span class="p">(</span><span class="n">argc</span><span class="p">,</span> <span class="n">argv</span><span class="p">);</span>

    <span class="n">opts</span><span class="p">.</span><span class="n">add_value</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="sc">&#39;a&#39;</span><span class="p">,</span> <span class="s">&quot;address&quot;</span><span class="p">,</span> <span class="s">&quot;listen on URL&quot;</span><span class="p">,</span> <span class="s">&quot;URL&quot;</span><span class="p">);</span>

    <span class="k">try</span> <span class="p">{</span>
        <span class="n">opts</span><span class="p">.</span><span class="n">parse</span><span class="p">();</span>

        <span class="n">broker</span> <span class="n">b</span><span class="p">(</span><span class="n">url</span><span class="p">);</span>
        <span class="n">proton</span><span class="o">::</span><span class="n">default_container</span><span class="p">(</span><span class="n">b</span><span class="p">.</span><span class="n">handler</span><span class="p">()).</span><span class="n">run</span><span class="p">();</span>

        <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
    <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="k">const</span> <span class="n">example</span><span class="o">::</span><span class="n">bad_option</span><span class="o">&amp;</span> <span class="n">e</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">opts</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span> <span class="o">&lt;&lt;</span> <span class="n">e</span><span class="p">.</span><span class="n">what</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
    <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">exception</span><span class="o">&amp;</span> <span class="n">e</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">std</span><span class="o">::</span><span class="n">cerr</span> <span class="o">&lt;&lt;</span> <span class="n">e</span><span class="p">.</span><span class="n">what</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>

<p><a href="broker.cpp">Download this file</a></p>
