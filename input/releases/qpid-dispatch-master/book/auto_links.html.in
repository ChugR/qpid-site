
  
  <div class="section" id="indirect-waypoints-and-auto-links">
<h1>2.5. Indirect Waypoints and Auto-Links<a class="headerlink" href="#indirect-waypoints-and-auto-links" title="Permalink to this headline">.</a></h1>
<p>This feature was introduced in Qpid Dispatch 0.6.  It is a significant
improvement on an earlier somewhat experimental feature called
Waypoints.</p>
<p>Auto-link is a feature of Qpid Dispatch Router that enables a router
to actively attach a link to a node on an external AMQP container.
The obvious application for this feature is to route messages through
a queue on a broker, but other applications are possible as well.</p>
<p>An auto-link manages the lifecycle of one AMQP link.  If messages are
to be routed to and from a queue on a broker, then two auto-links are
needed: one for sending messages to the queue and another for
receiving messages from the queue.  The container to which an
auto-link attempts to attach may be identified in one of two ways:</p>
<blockquote>
<div><ul class="simple">
<li>The name of the connector/listener that resulted in the connection
of the container, or</li>
<li>The AMQP container-id of the remote container.</li>
</ul>
</div></blockquote>
<div class="section" id="queue-waypoint-example">
<h2>2.5.1. Queue Waypoint Example<a class="headerlink" href="#queue-waypoint-example" title="Permalink to this headline">.</a></h2>
<p>Here is an example configuration for routing messages deliveries
through a pair of queues on a broker:</p>
<div class="highlight-python"><div class="highlight"><pre><span></span>connector {
    name: broker
    role: route-container
    addr: &lt;hostname&gt;
    port: &lt;port&gt;
    sasl-mechanisms: ANONYMOUS
}

address {
    prefix: queue
    waypoint: yes
}

autoLink {
    addr: queue.first
    dir: in
    connection: broker
}

autoLink {
    addr: queue.first
    dir: out
    connection: broker
}

autoLink {
    addr: queue.second
    dir: in
    connection: broker
}

autoLink {
    addr: queue.second
    dir: out
    connection: broker
}
</pre></div>
</div>
<p>The <em>address</em> entity identifies a namespace (queue.*) that will be
used for routing messages through queues via autolinks.  The four
<em>autoLink</em> entities identify the head and tail of two queues on the
broker that will be connected via auto-links.</p>
<p>If there is no broker connected, the auto-links shall remain
<em>inactive</em>.  This can be observed by using the <em>qdstat</em> tool:</p>
<div class="highlight-python"><div class="highlight"><pre><span></span>$ qdstat --autolinks
AutoLinks
  addr          dir  phase  link  status    lastErr
  ===================================================
  queue.first   in   1            inactive
  queue.first   out  0            inactive
  queue.second  in   1            inactive
  queue.second  out  0            inactive
</pre></div>
</div>
<p>If a broker comes online with a queue called <em>queue.first</em>, the
auto-links will attempt to activate:</p>
<div class="highlight-python"><div class="highlight"><pre><span></span>$ qdstat --autolinks
AutoLinks
  addr          dir  phase  link  status  lastErr
  ======================================================================
  queue.first   in   1      6     active
  queue.first   out  0      7     active
  queue.second  in   1            failed  Node not found: queue.second
  queue.second  out  0            failed  Node not found: queue.second
</pre></div>
</div>
<p>Note that two of the auto-links are in <em>failed</em> state because the
queue does not exist on the broker.</p>
<p>If we now use the Qpid Proton example application <em>simple_send</em> to
send three messages to queue.first via the router:</p>
<div class="highlight-python"><div class="highlight"><pre><span></span>$ python simple_send.py -a 127.0.0.1/queue.first -m3
all messages confirmed
</pre></div>
</div>
<p>and then look at the address statistics on the router:</p>
<div class="highlight-python"><div class="highlight"><pre><span></span>$ qdstat -a
Router Addresses
  class   addr           phs  distrib   in-proc  local  remote  cntnr  in  out  thru  to-proc  from-proc
  ========================================================================================================
  mobile  queue.first    1    balanced  0        0      0       0      0   0    0     0        0
  mobile  queue.first    0    balanced  0        1      0       0      3   3    0     0        0
</pre></div>
</div>
<p>we see that <em>queue.first</em> appears twice in the list of addresses.  The
<em>phs</em>, or phase column shows that there are two phases for the
address.  Phase &#8216;0&#8217; is for routing message deliveries from producers
to the tail of the queue (the <em>out</em> auto-link associated with the
queue).  Phase &#8216;1&#8217; is for routing deliveries from the head of the
queue to subscribed consumers.</p>
<p>Note that three deliveries have been counted in the &#8220;in&#8221; and &#8220;out&#8221;
columns for phase &#8216;0&#8217;.  The &#8220;in&#8221; column represents the three messages
that arrived from simple_send and the &#8220;out&#8221; column represents the
three deliveries to the queue on the broker.</p>
<p>If we now use <em>simple_recv</em> to receive three messages from this
address:</p>
<div class="highlight-python"><div class="highlight"><pre><span></span>$ python simple_recv_noignore.py -a 127.0.0.1:5672/queue.first -m3
{u&#39;sequence&#39;: int32(1)}
{u&#39;sequence&#39;: int32(2)}
{u&#39;sequence&#39;: int32(3)}
</pre></div>
</div>
<p>We receive the three queued messages.  Looking at the addresses again,
we see that phase &#8216;1&#8217; was used to deliver those messages from the
queue to the consumer.</p>
<div class="highlight-python"><div class="highlight"><pre><span></span>$ qdstat -a
Router Addresses
  class   addr           phs  distrib   in-proc  local  remote  cntnr  in  out  thru  to-proc  from-proc
  ========================================================================================================
  mobile  queue.first    1    balanced  0        0      0       0      3   3    0     0        0
  mobile  queue.first    0    balanced  0        1      0       0      3   3    0     0        0
</pre></div>
</div>
<p>Note that even in a multi-router network, and with multiple producers
and consumers for <em>queue.first</em>, all deliveries will be routed through
the queue on the connected broker.</p>
</div>
<div class="section" id="sharded-queue-example">
<h2>2.5.2. Sharded Queue Example<a class="headerlink" href="#sharded-queue-example" title="Permalink to this headline">.</a></h2>
<p>Here is an extension of the above example to illustrate how Qpid
Dispatch Router can be used to create a distributed queue in which
multiple brokers share the message-queueing load.</p>
<div class="highlight-python"><div class="highlight"><pre><span></span>connector {
    name: broker1
    role: route-container
    addr: &lt;hostname&gt;
    port: &lt;port&gt;
    sasl-mechanisms: ANONYMOUS
}

connector {
    name: broker2
    role: route-container
    addr: &lt;hostname&gt;
    port: &lt;port&gt;
    sasl-mechanisms: ANONYMOUS
}

address {
    prefix: queue
    waypoint: yes
}

autoLink {
    addr: queue.first
    dir: in
    connection: broker1
}

autoLink {
    addr: queue.first
    dir: out
    connection: broker1
}

autoLink {
    addr: queue.first
    dir: in
    connection: broker2
}

autoLink {
    addr: queue.first
    dir: out
    connection: broker2
}
</pre></div>
</div>
<p>In the above configuration, there are two instances of <em>queue.first</em>
on brokers 1 and 2.  Message traffic from producers to address
<em>queue.first</em> shall be balanced between the two instance and messages
from the queues shall be balanced across the collection of subscribers
to the same address.</p>
</div>
<div class="section" id="dynamically-adding-shards">
<h2>2.5.3. Dynamically Adding Shards<a class="headerlink" href="#dynamically-adding-shards" title="Permalink to this headline">.</a></h2>
<p>Since configurable entities in the router can also be accessed via the
management protocol, we can remotely add a shard to the above example
using <em>qdmanage</em>:</p>
<div class="highlight-python"><div class="highlight"><pre><span></span>qdmanage create --type org.apache.qpid.dispatch.connector addr=&lt;host&gt; port=&lt;port&gt; name=broker3
qdmanage create --type org.apache.qpid.dispatch.router.config.autoLink addr=queue.first dir=in connection=broker3
qdmanage create --type org.apache.qpid.dispatch.router.config.autoLink addr=queue.first dir=out connection=broker3
</pre></div>
</div>
</div>
</div>

