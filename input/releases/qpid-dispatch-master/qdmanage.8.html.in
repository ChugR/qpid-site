<h2>NAME</h2>
<p>qdmanage -
   management client to control or query qdrouterd(8)
</p>
<h2><a name="_synopsis"></a>SYNOPSIS</h2>
<p><strong>qdmanage</strong> [<b>OPTIONS</b>] <b>OPERATION</b> [<b>ARGUMENTS</b>]</p>
<h2><a name="_description"></a>DESCRIPTION</h2>
<p>An AMQP management client for use with qdrouterd. Sends AMQP management
operations requests and prints the response in JSON format. This is a
generic AMQP management tool and can be used with any standard AMQP
managed endpoint, not just with qdrouter.</p>
<h2><a name="_options"></a>OPTIONS</h2>
<p>-h, --help
:   show this help message and exit</p>
<p>--version
:   Print version and exit.</p>
<p>--type=TYPE
:   Type of entity to operate on.</p>
<p>--name=NAME
:   Name of entity to operate on.</p>
<p>--identity=ID
:   Identity of entity to operate on.</p>
<p>--indent=INDENT
:   Pretty-printing indent. -1 means don&#8217;t pretty-print (default 2)</p>
<p>--stdin
:   Read attributes as JSON map or list of maps from stdin.</p>
<p>--body=BODY
:   JSON value to use as body of a non-standard operation call.</p>
<p>--properties=PROPERTIES
:   JSON map to use as properties for a non-standard operation call.</p>
<h3><a name="_connection_options"></a>Connection Options</h3>
<p>-b URL, --bus=URL
:   URL of the messaging bus to connect to (default 0.0.0.0)</p>
<p>-r ROUTER-ID, --router=ROUTER-ID
:   Router to be queried</p>
<p>-t SECS, --timeout=SECS
:   Maximum time to wait for connection in seconds (default 5)</p>
<p>--ssl-certificate=CERT
:   Client SSL certificate (PEM Format)</p>
<p>--ssl-key=KEY
:   Client SSL private key (PEM Format)</p>
<p>--ssl-trustfile=TRUSTED-CA-DB
:   Trusted Certificate Authority Database file (PEM Format)</p>
<p>--ssl-password=PASSWORD
:   Certificate password, will be prompted if not specifed.</p>
<h2><a name="_operations"></a>OPERATIONS</h2>
<dl>
<dt>
<code>query</code> [<b>ATTR</b>&#8230;]
</dt>
<dd>
<p>
  Print attributes for multiple entities. Prints all entities by default, use
  --type, --name or --identity options to restrict which entities are printed.
  Prints the attributes named in the ATTR list, or all attributes if none are
  listed.
</p>
</dd>
<dt>
<code>create</code> [<b>ATTR=VALUE</b>&#8230;]
</dt>
<dd>
<p>
  Create a new entity with the specified attributes. With the --stdin
  option, read attributes from stdin. This can be a JSON map of
  attributes to create a single entity, or a JSON list of maps to create
  multiple entities.
</p>
</dd>
<dt>
<code>read</code>
</dt>
<dd>
<p>
  Print all the attributes of a single entity, specified by the --name or
  --identity options.
</p>
</dd>
<dt>
<code>update</code> [<b>ATTR=VALUE</b>&#8230;]
</dt>
<dd>
<p>
  Update the attributes of an existing entity. If an ATTR name is listed with
  no =VALUE, that attribute will be deleted from the entity. With the --stdin
  option, read attributes from stdin. This can be a JSON map of attributes to
  update a single entity, or a JSON list of maps to update multiple entities.
</p>
</dd>
<dt>
<code>delete</code>
</dt>
<dd>
<p>
  Delete an entity specified by the --name or --identity options.
</p>
</dd>
<dt>
<code>get-types</code> [<b>TYPE</b>]
</dt>
<dd>
<p>
  List entity types with their base types. With no arguments list all
  types.
</p>
</dd>
<dt>
<code>get-operations</code> [<b>TYPE</b>]
</dt>
<dd>
<p>
  List entity types with their operations. With no arguments list all
  types.
</p>
</dd>
<dt>
<code>get-attributes</code> [<b>TYPE</b>]
</dt>
<dd>
<p>
  List entity types with their attributes. With no arguments list all
  types.
</p>
</dd>
<dt>
<code>get-annotations</code> [<b>TYPE</b>]
</dt>
<dd>
<p>
  List entity types with their annotations. With no arguments list all
  types.
</p>
</dd>
<dt>
<code>get-mgmt-nodes</code>
</dt>
<dd>
<p>
  List all other known management nodes connected to this one.
</p>
</dd>
<dt>
<code>get-json-schema</code> [<b>INDENT</b>]
</dt>
<dd>
<p>
  Get the router schema in JSON format. Optional integer indent for
  formatted output.
</p>
</dd>
<dt>
<code>get-log</code> [<b>INDENT</b>]
</dt>
<dd>
<p>
  Get recent log entries from the router.
</p>
</dd>
</dl>
<h2><a name="_files"></a>FILES</h2>
<dl>
<dt>
/usr/local/share/doc/qpid-dispatch/qdrouter.json
</dt>
<dd>
<p>
  Management schema for qdrouterd.
</p>
</dd>
<dt>
/usr/local/share/doc/qpid-dispatch/qdrouter.json.readme.txt
</dt>
<dd>
<p>
  Explanation of the management schema.
</p>
</dd>
</dl>
<h2><a name="_examples"></a>EXAMPLES</h2>
<p><b>Show the logging configuration</b></p>
<table border="0" bgcolor="#e8e8e8" width="100%" cellpadding="10"><tr><td>
<pre><code>qdmanage query --type=log</code></pre>
</td></tr></table>
<p><b>Enable debug and higher log messages by default:</b></p>
<table border="0" bgcolor="#e8e8e8" width="100%" cellpadding="10"><tr><td>
<pre><code>qdmanage update name=log/DEFAULT enable=debug+</code></pre>
</td></tr></table>
<p><b>Enable trace log messages only for the MESSAGE module and direct MESSAGE logs to the file "test.log"</b></p>
<table border="0" bgcolor="#e8e8e8" width="100%" cellpadding="10"><tr><td>
<pre><code>qdmanage update name=log/MESSAGE enable=trace output=test.log</code></pre>
</td></tr></table>
<p><b>Set MESSAGE logging back to the default</b></p>
<table border="0" bgcolor="#e8e8e8" width="100%" cellpadding="10"><tr><td>
<pre><code>qdmanage update name=log/MESSAGE enable=default</code></pre>
</td></tr></table>
<p><b>Disable MESSAGE logging</b></p>
<table border="0" bgcolor="#e8e8e8" width="100%" cellpadding="10"><tr><td>
<pre><code>qdmanage update name=log/MESSAGE enable=none</code></pre>
</td></tr></table>
<h2><a name="_see_also"></a>SEE ALSO</h2>
<p><b>qdrouterd(8)</b>, <b>qdstat(8)</b>, <b>qdrouterd.conf(5)</b></p>
<p><a href="http://qpid.apache.org/components/dispatch-router">http://qpid.apache.org/components/dispatch-router</a></p>
